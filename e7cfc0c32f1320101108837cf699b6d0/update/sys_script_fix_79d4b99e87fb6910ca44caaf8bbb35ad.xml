<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <before>false</before>
        <description/>
        <name>Sakon Order</name>
        <record_for_rollback>true</record_for_rollback>
        <script><![CDATA[var logger = new LogUtilities();
var logSource = 'Sakon Mobile Sync Orders - Scheduled Job';
logger.writeInfo(logSource, 'Start - ' + logSource);
var currentScope = gs.getCurrentScopeName();
var gr = new GlideRecordSecure(currentScope + '_' + 'entity_sync_queue');
gr.addQuery('sys_id', 'e4a29c3bdb907d50e6f862cb139619e7');
gr.orderBy('number');
gr.query();
while (gr.next()) {
    var orderid = gr.servicenow_entity_id;
    var syncType = gr.sakon_sync_action;
    var syncID = gr.number;
    var sakonID = gr.sakon_entity_id;
    logger.writeInfo(logSource, 'Starting Order Sync for ' + orderid + ';Sakon Sync Action: ' + syncType);
    new MarketplaceSyncScript().loadData(orderid, syncType, syncID, sakonID);
	
}


//Sync Order Status
new MarketplaceSyncScript().updateOrderStatus();

logger.writeInfo(logSource, 'End - ' + logSource);

// buildJsonRequest('REQ1024799');

// function buildJsonRequest(OrderID) {
//     var currentScope = gs.getCurrentScopeName();
//     var reqSysID;
//     var catItemSysID;
//     var orderType = '';
//     var networkProvider = '';
//     var requestBody = {};
//     var quantity;
//     var userSakonId;
//     var userName;
//     var orderComment;
//     var i = 0;

//     requestBody.OrderItems = [];
//     var grRequest = new GlideRecordSecure('sc_request');
//     grRequest.addQuery('number', OrderID);
//     grRequest.query();
//     while (grRequest.next()) {
//         reqSysID = grRequest.sys_id;
//         orderComment = '';
//         requestBody.CorrelationId = grRequest.number.toString();
//     }
	
// 	gs.info('1 API Request body: '+ requestBody);

//     var grReqItem = new GlideRecordSecure('sc_req_item');
//     grReqItem.addQuery('request', reqSysID);
//     grReqItem.query();
//     while (grReqItem.next()) {
//         //Check if the requested item belongs to Sakon Catalog
//         var isSakonCatItem = new CommonUtilities().isSakonCatItem(grReqItem.cat_item.getDisplayValue());
//         if (isSakonCatItem.toString().toLowerCase() === 'true') {
//             var item = {
//                 "UniqueProductId": 1234,
//                 "SubformDataId": 18,
//                 "Quantity": 1,
//                 "PhoneNumber": 0,
//                 "CorrelationId": 0,
//                 "ServicePackId": 0,
//                 "OrderTypeID": 0,
//                 "ServiceProviderId": 0
//             };

//             //check if logged in user is an admin user
//             /*var current_user_id = grRequest.opened_by.toString();
//             var commonUtilities = new CommonUtilities();
//             isAdmin = commonUtilities.isAdmin(current_user_id);
//             if (isAdmin == 'true') {
//                 userName = grReqItem.variables.order_for_user.toString();
//             } else {
//                 //Assigned opened by user field to user name as requested for is modified by some clients as part of customization.
//                 userName = grRequest.opened_by.toString();
//             }*/
//             userName = grReqItem.variables.order_for_user.toString();
//             gs.info(userName + " " + reqSysID);
//             var grSakonUser = new GlideRecordSecure(currentScope + "_" + 'users');
//             grSakonUser.addQuery('servicenow_user_id', userName);
//             grSakonUser.query();
//             while (grSakonUser.next()) {
//                 userSakonId = grSakonUser.sakon_user_id.toString();
//             }

//             requestBody.ForUserId = userSakonId;
			
// 			gs.info('2 API Request body: '+ requestBody);
//             requestBody.Comment = grReqItem.variables.note.toString();
//             requestBody.EligibilityUserId = userSakonId;
//             requestBody.ShippingAddress = {};
//             requestBody.ShippingAddress.AddressLine1 = grReqItem.variables.address_line_1.toString();
//             requestBody.ShippingAddress.AddressLine2 = grReqItem.variables.address_line_2.toString();
//             requestBody.ShippingAddress.AttentionName = grReqItem.variables.attention_name.toString();
//             requestBody.ShippingAddress.City = grReqItem.variables.city.toString();
//             requestBody.ShippingAddress.Country = grReqItem.variables.country.toString();
//             requestBody.ShippingAddress.FirstName = grReqItem.variables.first_name.toString();
//             requestBody.ShippingAddress.LastName = grReqItem.variables.last_name.toString();
//             requestBody.ShippingAddress.PhoneNumber = grReqItem.variables.contact_number.toString();
// 			//requestBody.ShippingAddress.PhoneNumber = 0;
//             requestBody.ShippingAddress.State = grReqItem.variables.state.toString();
//             requestBody.ShippingAddress.ZipCode = grReqItem.variables.zip_code.toString();

//             requestBody.ShippingTypeId = grReqItem.variables.shipping_type.toString();
//             requestBody.OrderItems.push(item);
//             gs.info("requestBody: " + requestBody);
//             networkProvider = grReqItem.variables.carrier;
//             orderType = grReqItem.variables.order_type;
//             quantity = grReqItem.quantity;
//             requestBody.OrderItems[i].CorrelationId = grReqItem.number.toString();
//             var grCatItem = new GlideRecordSecure('sc_cat_item');
//             grCatItem.addQuery('name', grReqItem.getDisplayValue('cat_item'));
//             grCatItem.addQuery('active', true);
//             grCatItem.query();
//             var category = '';
//             while (grCatItem.next()) {
//                 catItemSysID = grCatItem.sys_id;
//                 category = grCatItem.category.toString();
//                 break;
//             }
//             var grItems = new GlideRecordSecure(currentScope + '_' + 'sakon_marketplace_catalog_items_table');
//             grItems.addQuery('servicenow_catalog_item_id', catItemSysID);
//             if (category == 'b0a568352fc00110831952172799b6d4') {
//                 grItems.addQuery('order_type', orderType);
//                 grItems.addQuery('network_provider', networkProvider);
//             }
//             grItems.query();
//             while (grItems.next()) {
//                 if (gs.nil(grItems.order_type_id.toString())) {
//                     requestBody.OrderItems[i].OrderTypeID = 1702;
//                 } else {
//                     requestBody.OrderItems[i].OrderTypeID = parseInt(grItems.order_type_id.toString());
//                 }
//                 requestBody.OrderItems[i].ServiceProviderId = parseInt(grItems.service_provider_id.toString());
//                 requestBody.OrderItems[i].UniqueProductId = parseInt(grItems.id.toString());
//                 requestBody.OrderItems[i].Quantity = 1; //Hard coded to 1 as only item allowed per order.
//                 var isDevice = new CommonUtilities().isDevice(catItemSysID);
//                 if (isDevice.toString().toLowerCase() === 'true') {
//                     requestBody.OrderItems[i].PhoneNumber = parseInt((grReqItem.variables.phone_number_mp.getDisplayValue().toString()).replace(/[^\n\d]+/g, ''));
//                 }

//                 break;
//             }
//             i++;
//         }
//     }

//     requestBody = JSON.stringify(requestBody);
//     gs.info('API Request body: '+ requestBody);
//     return requestBody;
// }]]></script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>ShaikP</sys_created_by>
        <sys_created_on>2023-07-05 06:20:02</sys_created_on>
        <sys_id>79d4b99e87fb6910ca44caaf8bbb35ad</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>Sakon Order</sys_name>
        <sys_package display_value="Sakon Mobile v2" source="x_sakon_mobile">e7cfc0c32f1320101108837cf699b6d0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Sakon Mobile v2">e7cfc0c32f1320101108837cf699b6d0</sys_scope>
        <sys_update_name>sys_script_fix_79d4b99e87fb6910ca44caaf8bbb35ad</sys_update_name>
        <sys_updated_by>DhruvM</sys_updated_by>
        <sys_updated_on>2023-08-03 11:44:59</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
